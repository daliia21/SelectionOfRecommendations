// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TouristRoutes;

#nullable disable

namespace TouristRoutes.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513131751_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TouristRoutes.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TouristRoutes.Models.AppUserTag", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("AppUserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UserInfoTags");
                });

            modelBuilder.Entity("TouristRoutes.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LevelOfTraining")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoutePrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("TouristRoutes.Models.RouteTag", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("RouteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RouteInfoTags");
                });

            modelBuilder.Entity("TouristRoutes.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("RouteId")
                        .HasColumnType("integer");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TagType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TouristRoutes.Models.AppUserTag", b =>
                {
                    b.HasOne("TouristRoutes.Models.AppUser", "AppUser")
                        .WithMany("UserTags")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristRoutes.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TouristRoutes.Models.RouteTag", b =>
                {
                    b.HasOne("TouristRoutes.Models.Route", "Route")
                        .WithMany("RouteTags")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristRoutes.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TouristRoutes.Models.Tag", b =>
                {
                    b.HasOne("TouristRoutes.Models.Route", null)
                        .WithMany("Tags")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("TouristRoutes.Models.AppUser", b =>
                {
                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("TouristRoutes.Models.Route", b =>
                {
                    b.Navigation("RouteTags");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
